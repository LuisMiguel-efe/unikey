import numpy as np
from convert_template import hex_to_vector
from model import compile_siamese_network
import os
from dataset_train import hex_strings, labels

# Función para autenticar un usuario y devolver su etiqueta si se autentica
def authenticate_user(hex_str, stored_fingerprint_vectors, labels):
    # Convertir la nueva huella a vector
    new_fingerprint_vector = hex_to_vector(hex_str)
    
    # Cargar el modelo entrenado para predecir
    input_shape = new_fingerprint_vector.shape
    model_path = 'siamese_model.keras'
    if not os.path.exists(model_path):
        raise Exception("No se ha entrenado el modelo todavía.")
    
    model = compile_siamese_network(input_shape)
    model.load_weights(model_path)

    # Comparar con las huellas almacenadas
    for i, stored_vector in enumerate(stored_fingerprint_vectors):
        distance = model.predict([np.expand_dims(new_fingerprint_vector, axis=0), np.expand_dims(stored_vector, axis=0)])
        if distance < 0.01:  # Umbral que determina si es la misma huella
            return True, labels[i], distance  # Retorna True y la etiqueta del usuario
    
    return False, None, distance  # Si no hay coincidencia, retorna False y None(id) y distancia

# Ejemplo de autenticación
# Convertir todas las cadenas hexadecimales a vectores y almacenarlas en stored_fingerprints
stored_fingerprints = [hex_to_vector(hex_string) for hex_string in hex_strings]

# Huella de entrada
hex_input
# huella no registrada
# hex_input

# Llamar a la función de autenticación
is_authenticated, user_label, distance = authenticate_user(hex_input, stored_fingerprints, labels)

# Mostrar el resultado
if is_authenticated:
    print(f"Usuario autenticado: id: {user_label}, distancia: {distance}")
else:
    print(f"Autenticación fallida. D = {distance}")
